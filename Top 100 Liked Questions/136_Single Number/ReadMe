Given an array of integers, every element appears twice except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory

翻译：
给定一个整数数组，每个元素出现了两次，仅仅一个元素出现一次，找出这个元素

注意：

你的算法应该有个线性的执行时间复杂度，你能够实现这个而不使整个内存


思路：

首先想到的是利用列表的count操作，这样可以直接得到每个元素出现的次数：

class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        myset = set(nums)
        for item in myset:
            if nums.count(item) == 1:
                return item
                
但是时间会超出限。

这里有一个方法，贼厉害！！！！！  利用异或的思想

If we take XOR of zero and some bit, it will return that bit
a xor 0 = a
If we take XOR of two same bits, it will return 0
a xo a = 0

a xor b xor a = a xor a xor b = b

所以连续求完异或的最终结果就是唯一单独的元素
